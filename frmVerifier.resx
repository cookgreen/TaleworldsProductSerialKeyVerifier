<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        4v+42+P/ttrj/7PX4f+63ub/xeTr/77d5P++3OP/weDl/7fa4f+32+P/vN7l/7vd4/+73uX/udzj/77i
        6f++4ej/vODl/77h5f+93uL/xODl/7vS1rKdsrcbhJeeAG99ggBfbWsAlP//AI6MgAaKn6gPp8TRk6fP
        2v634uj/uuPp/7jh6P+23uT/u+Lm/8Dm6v/B5er/vuLn/8Di6P/E5ev/weLn/8Tn6f/J6Ov/xubq/8bm
        6v/K6u3/xubp/8Xm6f/A4+f/x+rs/8vr7f/R7PD/ttXe/6C7xrN5i5NEdICFKF5kWwjE2uJ3q8fPt5C1
        wMKextP4tt7m/7rj6P+v2t//qdPa/6bR1/+q09r/rNXb/63W2/+v19z/tdrg/8Tm6/+42+D/rdPZ/7bb
        4P+32d7/rdLX/7Tb3/+63eL/ut3h/8Dk5v+63+H/v97i/8jm6f/N6u3/sNDX/6K/yfWlvsTnor/ElpvB
        1Oat1uH/ueLo/77n7P/G6u//xOju/7Ha3v+13+P/sNre/7Xe5P+u193/s9ve/7zi5f+029//z+7x/87t
        7f+12t3/xebp/7fc4P+33eH/veHk/9Pu7f/I5ub/y+fp/8jj5v/O6Ov/xePk/9Pt7//V7/H/1e/x/8Ti
        5/+SuMPti7PF2rHY4f/G7u//x+7w/7vg5f++5Oj/uuLm/7ri5v+54ub/uOPn/7ji5f+54+f/t+Ll/7zk
        5/+94+f/vOLm/77i5//C4+f/w+Xp/8jn6//G4+j/xuLl/8rl6P/H4ub/wOHk/7/g5P/A3uL/xOHk/9zy
        9P/V8/P/yOfp/5C1weqRucfMsdjh/8Xs7//C6uz/v+bp/7Xc4v+13eH/vOPm/7zl6f/A6e3/tuHm/73o
        7f++6Oz/uOHl/8Pq7f+v2N3/uODk/8/y8f+/5ej/u9zh/83n6v/R7/D/weHk/8/r7v/G5uj/zuzv/9Dv
        8v/N7fD/y+3w/8rt8P/G5uj/mbzI6Iauuseq0Nv/x+vw/8Ln6//C6On/kLrG/6PM1P/F6+3/u+Pm/67T
        2f+Wwsv/veTp/6nQ2v+VwMz/xevs/5vG0P+gytX/0PHx/6XQ2P+Xvsv/0uvt/9Tv7v+fxc3/stbe/8Hk
        5//O6+7/yOjr/8To6v/E6uz/xuzt/7re5P+Gq7fqeJmkgI2zvc6gxc/qqs/Y/r/k6f+Zw8v/ps/V/8Tp
        6//E6uv/jrjA/6bP1f/H7e7/oMjP/5rGzv/N7vH/q9Pa/6zS2P/R8vH/rtTa/5W6xf/O6Ov/1vDw/5a7
        xP+63N//veDl/77i5f+73uD/wuTm/6/U3P+hx9Hyk7bA4HCSnq11dH4CbIuVE2qFkix+nqyOpMfQ+8Tp
        7P/F7O//xezv/8Xs7//B6Ov/wejr/8Lo6//G7Oz/yuzv/87u8P/N7u//0PDw/9Px8f/S8PH/0O7x/9Pv
        8f/Y8vP/0PHy/9H08//J8fP/w+/x/8Ps7v+u09r/g6OyuWGAkj9ZdoQgXHR7C3aLlgB2lqAAco2aADVO
        VQ16maaPmb7I9bPa4P+13eT/s9rh/7fe5v+85On/wOjt/5a9xfaWtrypqszTlKrN0pSox8yZqcTJoKXD
        xqWaur7Sxufr/8js8P+64+j/teDm/7Tf5f+03uT/ocnT+4KntaFuipkadZiqAGB9igBge4MAAAAAAAAA
        AAAAAAAATWpzAFhwgQl1lKFKfJ2qaYKksm6CpbF2kbPBi5nBzN2v2eL/hK+79VJzfHZQcX4qVnSBIVF0
        fCFIanIkU3F8O4iqtLW14Of/m8TP+Y61waeLsL52gaWzdH6erXRxkqZfe5moDnKQnwAMCAkAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAaIKRAHqbqACDp7UAia++AJW9zAD///8AcJKfQ4yvveqw2OP/osrT/ZO6
        xeuYv8rklsDJ5JG7xOSVwcrwrdnj/5zG0fR7oLKATWd4Cq7b6wCiy9wAlrzOAIGmuwCDorEAosHQAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADpQWwAAAAkEZICSb4Sp
        u9KUucfilbnI6Jq/zu2XvMvxkrjH9ZG5x/iSt8XjgaSzcoSfqghkg5MAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//gP///wB///wAf//8AH///AB///wAf//8AH///AB///wAf//8AH///A
        B///wAf//8AH///AB///4Af//wAB//8AAP/+AAB/8AAAD+AAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAOAAAAfwAAAP/8AB///AA/8=
</value>
  </data>
</root>